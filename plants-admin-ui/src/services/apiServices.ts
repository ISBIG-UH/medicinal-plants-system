/* eslint-disable @typescript-eslint/no-unused-vars */
import { apiClient } from "./api";

//游댕 Requests Login to server
export async function apiLogin(request: LoginRequest): Promise<LoginResponse> {
  const ENDPOINT = "/login";
  console.log("apiLogin:", request);

  
  const response = {
    toastResponse: { type: "null", msg: "" },
    user: null
  };

  const requestData = {
    username: request.username,
    password: request.password,
  };

  try {
    const resp = await apiClient.post(ENDPOINT, requestData);
    
    if (resp.status == 200){
      response.user = resp.data;
      response.toastResponse.type = "success";
      response.toastResponse.msg = "Monograf칤a a침adida correctamente";
    } else if(resp.status == 403){
      response.toastResponse.type = "error";
      response.toastResponse.msg = "Credenciales incorrectas";
    }
    
  } catch (error) {
    console.error("Error in login:", error);
    response.toastResponse.type = "error";
    response.toastResponse.msg = "Inicio de sesi칩n fallido";
  }

  console.log("Response:", response);
  return response;
}

//游댕 Requests search results based in a query
export async function apiSearch(
  request: SearchRequest
): Promise<SearchResponse> {
  const ENDPOINT = "search/plants";
  console.log("apiSearch:", request);

  const query = request.input;

  const response = {
    toastResponse: { type: "null", msg: "" },
    results: [],
  };

  try {
    const resp = await apiClient.get(ENDPOINT, {
      params: { query },
    });

    response.results = resp.data;

  } catch (error) {
    console.error("Error fetching plants:", error);
    throw error;
  }
  console.log("Response:", response);
  return response;
}

//游댕 Requests all plant names starting with a letter
export async function apiGetIndex(
  request: GetIndexRequest
): Promise<GetIndexResponse> {
  const ENDPOINT = "/index";
  console.log("apiGetIndex:", request);

  const letter = request.letter;

  const response = {
    monographsBasics: [],
  };

  try {
    const resp = await apiClient.get(`${ENDPOINT}/${letter}`);
    response.monographsBasics = resp.data;

  } catch (error) {
    console.error("Error fetching plants:", error);
    throw error;
  }
  
  console.log("Response:", response);
  return response;
}

//游댕 Gets a monograph
export async function apiGetMonograph(
  request: GetMonographRequest
): Promise<GetMonographResponse> {
  const ENDPOINT = "/monograph";
  console.log("apiGetMonograph:", request);

  const response = {
    monograph: emptyMonograph
  }

  try {
    const resp = await apiClient.get(`${ENDPOINT}/${request.id}`);
    response.monograph = resp.data;

  } catch (error) {
    console.error("Error fetching monograph:", error);
    throw error;
  }

  console.log("Response:", response);
  return response;
}

//游댕 Posts a monograph
export async function apiAddMonograph(
  request: AddMonographRequest
): Promise<AddMonographResponse> {
  const ENDPOINT = "/monograph";
  console.log("apiAddMonograph:", request);

  const response = {
    toastResponse: { type: "null", msg: "" },
  };

  const requestData = {
    ...request.formData,
    id: 0,
  };

  try {
    await apiClient.post(ENDPOINT, requestData);
    response.toastResponse.type = "success";
    response.toastResponse.msg = "Monograf칤a a침adida correctamente";

  } catch (error) {
    console.error("Error adding monograph:", error);
    response.toastResponse.type = "error";
    response.toastResponse.msg = "No se pudo a침adir la monograf칤a";
  }

  console.log("Response:", response);
  return response;
}

//游댕 Puts a monograph
export async function apiEditMonograph(
  request: EditMonographRequest
): Promise<EditMonographResponse> {
  const ENDPOINT = "/monograph";
  console.log("apiEditMonograph:", request);

  const id = request.id;
  const response = {
    toastResponse: { type: "null", msg: "" },
  };

  const requestData = {
    ...request.formData,
    id
  };

  try {
    await apiClient.put(ENDPOINT, requestData);
    response.toastResponse.type = "success";
    response.toastResponse.msg = "Monograf칤a editada correctamente";

  } catch (error) {
    console.error("Error editing monograph:", error);
    response.toastResponse.type = "error";
    response.toastResponse.msg = "No se pudo editar la monograf칤a";
  }

  console.log("Response:", response);
  return response;
}

//游댕 Removes a monograph
export async function apiDeleteMonograph(
  request: DeleteMonographRequest
): Promise<DeleteMonographResponse> {
  const ENDPOINT = "/monograph";
  console.log("apiDeleteMonograph:", request);

  const response = {
    toastResponse: { type: "null", msg: "" },
  };

  try {
    await apiClient.delete(`${ENDPOINT}/${request.id}`);
    response.toastResponse.type = "success";
    response.toastResponse.msg = "Monograf칤a eliminada correctamente";
  } catch (error) {
    console.error("Error deleting monograph:", error);
    response.toastResponse.type = "error";
    response.toastResponse.msg = "No se pudo eliminar la monograf칤a";
  }

  console.log("Response:", response);
  return response;
}



//游댕 Gets the list of all App names
export async function requestAppsList() : Promise<AppItem[]>{
  const ENDPOINT = "/listapps";
  console.log("requestAppsItems");

  try {
    const response = await apiClient.get(ENDPOINT);
    return response.data
  } catch (error) {
    console.error("Error fetching apps list:", error);
    throw error;
  }
}


//游댕 Gets the list of all Plant names
export async function requestAllPlantsList() : Promise<string[]>{
  const ENDPOINT = "/listplants";
  console.log("requestAllPlantNames");

  // try {
  //   const response = await apiClient.get(ENDPOINT);
  //   return response.data
  // } catch (error) {
  //   console.error("Error fetching all plants list:", error);
  //   throw error;
  // }
  return ['Abey', 'Abrojo', 'Achicoria*', 'Achicoria de cabra', 'Adormidera*', 'Agalla de costa', 'Agrimonia', 'Agrimonia*', 'Aguacate', 'Aguedita', 'Aguedita macho', 'Aguinaldo azul claro', 'Aguinaldo de Pascuas', 'Aguinaldo rosado', 'Ajenjo*', 'Ajenjo Marino*', 'Aj칤 guaguao', 'Ajo', 'Ajonjol칤', 'Alacrancillo', 'Albahaca*', 'Albahaca de clavo*', 'Albahaca morada*', 'Alcachofa*', 'Alcanfor', 'Alcaravea*', 'Algalia', 'Algarrobo de olor', 'Algod칩n', 'Algod칩n de seda', 'Alholva*', 'Alkekengi*', 'Alm치cigo', 'Almendro de la India', 'Altea*', 'Amansaguapo', 'Amapola*', 'Anacag칲ita', 'Anam칰', 'An칩n', 'A침il cimarr칩n', 'Apasote', 'Ara침a gato', 'Aroma amarilla', 'Aroma blanca', 'Aroma de laguna', 'Arraig치n', 'Arraij치n', 'Arroz', 'Artemisa*', 'Artemisa', 'Asaf칠tida*', 'Avellano de costa', 'Avena', 'Ay칰a', 'Azafr치n bastardo*', 'Azafr치n cimarr칩n', 'Azucarito', 'Bag치', 'Baobab', 'Barbesco', 'Bardana*', 'Barrilla', 'Bast칩n de San Francisco', 'Bejuco amargo', 'Bejuco codicia', 'Bejuco colorado', 'Bejuco de lombriz', 'Bejuco de perdiz', 'Bejuco de terciopelo', 'Bejuco de tortuga', 'Bejuco de verraco', 'Bejuco de vieja', 'Bejuco fideo', 'Bejuco guara', 'Bejuco le침atero', 'Bejuco peludo', 'Bejuco San Pedro', 'Bejuco ub칤', 'Bele침o*', 'Belladona*', 'Berro', 'Berro de costa', 'Bija', 'Birij칤', 'Bledo blanco', 'Bledo carbonero', 'Bonete yucateco*', 'Boja', 'Boniato', 'Boniato de playa', 'Borraja*', 'Bosbor칤n', 'Botija', 'Bot칩n de oro', 'Brasilete', 'Brasilete falso', 'Brionia', 'Buglosa*', 'Bull칩n', 'Cabalonga', 'Cabellos de 치ngel', 'Cabo de hacha', 'Cabrito', 'Cafeto', 'Caguair치n amarillo', 'Caimito', 'Caisim칩n', 'Caisim칩n de an칤s', 'Calabaza', 'Calaguala', 'Calaminta*', 'Cal칠ndula*', 'Cambia voz', 'Cambustera cimarrona', 'Cambustera fina', 'Campana', 'Candelaria', 'Canela de China', 'Canutillo', 'Ca침a brava', 'Ca침a de az칰car', 'Ca침a de Castilla', 'Ca침a de lim칩n', 'Ca침af칤stola', 'Ca침amazo amargo', 'Ca침uela', 'Ca침uela santa', 'Caoba', 'Capulinas', 'Card칩n', 'Cardo santo', 'Cardo santo de Cuba', 'Carey', 'Carquesa', 'Cayeput*', 'Cebolleta', 'Cedro', 'Ceiba', 'Celestina azul', 'Cereza del pa칤s*', 'Cerillo de loma', 'Cipr칠s', 'Citronela*', 'Clavel chino', 'Clavel rojo', 'Clavellina', 'Coca', 'Cocotero', 'Cohombrillo*', 'Cojate', 'Colonia', 'Conchita azul', 'Consuelda*', 'Contraguao', 'Contra maligna', 'Copal', 'Copey', 'Copey Vera', 'Coral칤n', 'Coralitos', 'Cordob치n', 'Cordob치n arbusto', 'Corojo', 'Cortadera', 'Cuaba blanca', 'Cuabilla de costa', 'Cuajan칤', 'Cuasia', 'Cubanic칰', 'Cucaracha', 'Cuco', 'Culantrillo de pozo', 'Culantro*', 'Culantro cimarr칩n', 'Cundeamor', 'Curaboca', 'Curamag칲ey', 'C칰rbana', 'Curujey', 'Chamico', 'Chamico blanco', 'Chayote', 'Chicharr칩n', 'Chicharr칩n de cuabal', 'Chichicate', 'Chicle', 'Chivo', 'Dagame', 'Dalia', 'D치til', 'Diamela', 'Dicha', 'Diente de le칩n', 'Digital', 'Dinamita', 'Dividiv칤', 'Doradilla', 'Dormidera', 'Dulcamara*', 'Eclipta blanca', 'Empanadilla', 'Encina', 'Eneldo*', 'Escoba amarga', 'Escobilla', 'Escudo de La Habana', 'Espinaca de malabar', 'Espino cerval*', 'Espuela de caballero  (herb치ceas)', 'Espuela de caballero  (arbusto)', 'Estrag칩n*', 'Estrofanto*', 'Estropajo', 'Eucalipto*', 'Farolito', 'Fernandina', 'Ficus benjamina', 'Filigrana', 'Filigrana morada', 'Flor de agua', 'Flor de barbero', 'Flor de la calentura', 'Flor de muerto', 'Flor de Pascuas', 'Frailecillo cimarr칩n', 'Frescura', 'Fresno*', 'Frijol caballero', 'Frijol de cerca', 'Fruta bomba', 'Fustete', 'Gal치n de noche', 'Gallito', 'Gandul', 'Gavil치n', 'Genciana de la tierra', 'Geranio manzana', 'Girasol', 'Graciola', 'Grama', 'Granado', 'Grevilea', 'Grindelia*', 'Grosella', 'Grosella china', 'Guacamaya', 'Guacamaya francesa', 'Guaco', 'Guaguas칤', 'Gu치imaro', 'Guajaca', 'Guam치', 'Guam치 candel칩n', 'Guanina', 'Guao', 'Guara', 'Gu치sima', 'Guatemala', 'Guayaba', 'Guayac치n', 'G칲ira cimarrona', 'G칲irito de pasi칩n', 'G칲iro amargo', 'Guizazo de caballo', 'Guizazo de cochino', 'Hedyosmum', 'Helecho real', 'Hep치tica de las fuentes', 'Hernandia', 'Higuera', 'Higuereta', 'Hinojo*', 'Hisopo*', 'Huevo de gallo', 'Icaco', 'Ilang-Ilang*', 'Ilusi칩n', 'Incienso', 'Inula*', 'Ipecacuana de M칠xico', 'Isbut*', '칈tamo real', 'Jabilla', 'Jaboncillo', 'Jagua', 'Jag칲ey', 'Jambol치n', 'Jayabacan치', 'Jayajabico', 'Jazm칤n del Cabo', 'Jazm칤n de cinco hojas', 'Jengibre*', 'J칤a manzanilla', 'Jib치', 'J칤cama', 'Jiqu칤', 'Jobo', 'Junco marino', 'J칰piter', 'Justicia', 'L치grimas de Job', 'Laurel*', 'Laurel de la India', 'Lechuga', 'Lechuga cimarrona', 'Lengua de serpiente', 'Lengua de vaca (1)', 'Lengua de vaca (2)', 'Lentejuela', 'Leviza', 'Licopodio', 'Lim칩n', 'Lirio de Costa', 'Lobelia', 'Llant칠n', 'Llant칠n cimarr칩n', 'Ller칠n', 'Maboa', 'Mac칤o', 'Macuillamia', 'Macurije', 'Macusey', 'Maguey', 'Mag칲ira', 'Ma칤z', 'Majagua', 'Majagua de Florida', 'Majuito', 'Malacara', 'Malagueta*', 'Malagueta', 'Malva blanca (1)', 'Malva blanca (2)', 'Malva bruja', 'Malva de caballo', 'Malva prieta', 'Malva t칠', 'Mamey colorado', 'Mamey de Santo Domingo', 'Mamoncillo chino', 'Manaj칰', 'Mangle colorado', 'Mangle prieto', 'Mango', 'Man칤', 'Man칤 cimarr칩n', 'Manzanilla*', 'Manzanilla de la tierra', 'Manzanillo', 'Marab칰', 'Mara침칩n', 'Mara침칩n de la maestra', 'Mara침uela', 'Maraved칤', 'Maravilla', 'Marilope', 'Maromera', 'Mar Pac칤fico', 'Marrubio*', 'Mastuerzo', 'Mata diabetes*', 'Mataguao', 'Mate', 'Mate de costa', 'Matemaco', 'Mazorquilla', 'Mejorana', 'Melisa*', 'Mel칩n de agua', 'Membrillo de Bengala', 'Menta americana', 'Menta japonesa*', 'Mil flores', 'Milenrama*', 'Mirobalanos 칠mblicos', 'Moco de pavo', 'Mora de la India', 'Moruno abey', 'Mostacilla', 'Mostaza de la tierra', 'Mostaza negra*', 'Muralla*', 'Nabaco', 'Najesi', 'Naranja agria', 'Negracuba', 'Nigua', 'Nitro', 'Nogal de la India', 'Nogal del pa칤s', 'Nuez v칩mica cubana', 'Ocuje', 'Ojo de Buey', 'Oldenlandia', 'Olivo bastardo', 'Ombligo de Venus', 'Oreganillo', 'Oregano*', 'Or칠gano cimarr칩n', 'Or칠gano franc칠s', 'Oreja de rat칩n', 'Orozuz de la tierra', 'Ortiguilla*', 'Pachul칤*', 'Palma alcanfor', 'Palma cana', 'Palma real', 'Palmarrosa', 'Palo amarillo', 'Palo boniato', 'Palo caballero', 'Palo campeche', 'Palo de caja', 'Palo de gallina', 'Palo de Santa Mar칤a', 'Palo Guaco', 'Palo vencedor', 'Palo verraco', 'Papa', 'Papito de la reina', 'Para칤so', 'Para칤so franc칠s', 'Pasa de negro', 'Pasionaria de cerca', 'Pelo de perro', 'Penda', 'Pendejera', 'P칠ndola', 'Peon칤a', 'Pepino cimarr칩n', 'Peralejo de pinares', 'Perejil', 'Perejil de playa', 'Picapica', 'Pimienta', 'Pimpinela menor*', 'Piniche', 'Pino macho', 'Pi침a', 'Pi침a de rat칩n', 'Pi침ipi침칤', 'Pi침칩n amoroso', 'Pi침칩n botija', 'Pi침uela', 'Pipa de turco', 'Piscuala', 'Pitahaya', 'Pitajon칤', 'Platanillo', 'Platanillo de Cuba', 'Pl치tano', 'Pl치tano cimarr칩n', 'Plateado', 'Poleo*', 'Pomarrosa', 'Ponas칤', 'Pringamoza**', 'Pringamoza', 'Prodigiosa', 'Quimbomb칩', 'R치bano rusticano*', 'Rabo de gato', 'Rabo de zorra', 'Ra칤z de China', 'Ra칤z de indio', 'Ra칤z de paciencia*', 'Ram칩n de caballo', 'Rauwolfia*', 'Real t칠', 'Resed치', 'Revienta caballo', 'Roble blanco', 'Roble prieto', 'Romerillo blanco', 'Romero', 'Romero de costa (1)', 'Romero de costa (2)', 'Romero falso', 'Rompe camisa macho', 'Rompezarag칲ey (falso)', 'Rompezarag칲ey (verdadero)', 'Rosa francesa', 'Ruda', 'S치bila', 'Sabina', 'Sagitaria', 'Sag칰', 'Salta perico', 'Salvadera', 'Salvia de Castilla', 'Salvia de playa', 'Salvia marina', 'San Diego', 'Sanguinaria', 'Santa B치rbara', 'Santa Rita', 'Saponaria*', 'Sapote', 'Sapote blanco*', 'Sargaso com칰n', 'Sauce', 'Sa칰co amarillo', 'Sa칰co blanco', 'Sen*', 'Sen del Pa칤s', 'Seso vegetal', 'Siguaraya', 'S칰cheli blanco', 'Tabaco', 'T치bano', 'Tamarindo', 'Tamarindo chino', 'Tamarindo de Puerto Rico', 'Tanaceto*', 'Tapa camino', 'Tararaco', 'Tarro de chivo', 'Tebenque (1)', 'Tebenque (2)', 'Teca', 'Tengue', 'Tibis칤', 'Tila', 'Tito', 'Tomate', 'Tomillo*', 'Toronjil', 'Toronjil de menta', 'Tost칩n', 'Tr칠bol de agua', 'Tr칠bol de olor', 'Trencilla', 'Tribulillo', 'Trigo', 'Tuat칰a', 'Tuna blanca', 'Tuya', 'U침a de gato (leguminosa)', 'U침a de gato (2)', 'Uva caleta', 'Vacabuey', 'Vainilla', 'Var칤a', 'Vejiga de perro', 'Verbena', 'Verbena cimarrona', 'Verdolaga', 'Verdolaga de playa', 'Vetiver*', 'V칤bona', 'Vicaria blanca', 'Victoriana', 'Vinagrillo', 'Violeta', 'Violeta de los Alpes', 'Visnaga*', 'Vomitel', 'Yaba', 'Yabilla', 'Y치guna', 'Yait칤', 'Yagruma', 'Yamagua', 'Yana', 'Yanilla blanca', 'Yanilla prieta', 'Yaya', 'Yedra', 'Yerbabuena', 'Yerba caim치n', 'Yerba de cuchillo', 'Yerba de don Carlos', 'Yerba de garro', 'Yerba de Guanajay', 'Yerba de la ni침a (1)', 'Yerba de la ni침a (2)', 'Yerba de la plata', 'Yerba de la sangre', 'Yerba de la vieja', 'Yerba de la virgen de la Caridad del Cobre', 'Yerba de San Mart칤n', 'Yerba gatera*', 'Yerba graciosa', 'Yerba hedionda', 'Yerba lombricera', 'Yerbaluisa', 'Yerba mala', 'Yerba maraved칤', 'Yerba mora', 'Yerba mulata', 'Yerba porosa', 'Yuca agria', 'Yuquilla', 'Zancara침a', 'Zaragatona*', 'Zarza', 'Zarza blanca', 'Zarzaparrilla*', 'Zarzaparrilla de palito']
}



//游댕 Gets an App
export async function apiGetApp(
  request: GetAppRequest
): Promise<GetAppResponse> {
  const ENDPOINT = "/app";
  console.log("apiGetApp:", request);

  try {
    const response = await apiClient.get(`${ENDPOINT}/${request.id}`);
    return { app: response.data }
  } catch (error) {
    console.error("Error fetching app:", error);
    throw error;
  }
}


//游댕 Adds an App
export async function apiAddApp(
  request: AddAppRequest
): Promise<AddAppResponse> {
  const ENDPOINT = "/app";
  console.log("apiAddApp:", request);

  const response = {
    toastResponse: { type: "null", msg: "" },
  };

  const requestData = {
    ...request.formData,
    id: 0,
  };

  try {
    await apiClient.post(ENDPOINT, requestData);
    response.toastResponse.type = "success";
    response.toastResponse.msg = "Aplicaci칩n a침adida correctamente";

  } catch (error) {
    console.error("Error adding app:", error);
    response.toastResponse.type = "error";
    response.toastResponse.msg = "No se pudo a침adir la aplicaci칩n";
  }

  console.log("Response:", response);
  return response;
}

//游댕 Puts an App
export async function apiEditApp(
  request: EditAppRequest
): Promise<EditAppResponse> {
  const ENDPOINT = "/app";
  console.log("apiEditApp:", request);


  const id = request.id;
  const response = {
    toastResponse: { type: "null", msg: "" },
  };

  const requestData = {
    ...request.formData,
    id
  };

  try {
    await apiClient.put(ENDPOINT, requestData);
    response.toastResponse.type = "success";
    response.toastResponse.msg = "Aplicaci칩n editada correctamente";

  } catch (error) {
    console.error("Error editing app:", error);
    response.toastResponse.type = "error";
    response.toastResponse.msg = "No se pudo editar la aplicaci칩n";
  }

  console.log("Response:", response);
  return response;
}

//游댕 Removes an App
export async function apiDeleteApp(
  request: DeleteAppRequest
): Promise<DeleteAppResponse> {
  const ENDPOINT = "/app";
  console.log("apiDeleteApp:", request);

  const response = {
    toastResponse: { type: "null", msg: "" },
  };

  try {
    await apiClient.delete(`${ENDPOINT}/${request.id}`);
    response.toastResponse.type = "success";
    response.toastResponse.msg = "Aplicaci칩n eliminada correctamente";
  } catch (error) {
    console.error("Error deleting app:", error);
    response.toastResponse.type = "error";
    response.toastResponse.msg = "No se pudo eliminar la aplicaci칩n";
  }

  console.log("Response:", response);
  return response;
}




//////////////////////////////////////////////////////////////////////////////////////
const emptyMonograph: Monograph = {
  id: 0,
  name: "",
  genus: "",
  subsp: "",
  f: "",
  species: "",
  authors: "",
  family: "",
  var: "",
  subfamily: "",
  sy: [],
  vul: [],
  hab: "",
  des: "",
  cmp: "",
  use: "",
  pro: "",
  app: "",
  cul: "",
  bib: [],
};
///////////////////////////////////////////////////////////////////////////////////////
